#include<iostream>
using namespace std;
struct BSTreeNode {
    int data;
    BSTreeNode* left;
    BSTreeNode* right;
    BSTreeNode(int n,BSTreeNode *l=NULL,BSTreeNode *r=NULL):data(n),left(l),right(r){}
};
class Tree{
private:
    BSTreeNode* root;
public:
    Tree(int n)
    {
        root=new BSTreeNode(n);
    };
    void Insert(int n,BSTreeNode*& ptr){
        if (ptr==NULL){
            ptr=new BSTreeNode(n);
        }
        else if(n<ptr->data){
            Insert(n,ptr->left);
        }
        else if(n>ptr->data){
            Insert(n, ptr->right);
        }
    }

    void Insert(int n) {
        Insert(n, root);
    }

    void Find(int n) {
        BSTreeNode *ptr=root;
        int count = 1;
        while(n!=ptr->data){
            if(n<ptr->data){
                ptr=ptr->left;
            }
            else{
                ptr=ptr->right;
            }
            if(ptr==NULL){
                cout<<"NO";
                return;
            }
            count++;
        }
        cout<<count;
        return;
    }
};

int main(){
    int n;
    cin>>n;
    int x;
    cin>>x;
    Tree tree(x);
    for (int i = 1;i<n; i++){
        cin>>x;
        tree.Insert(x);
    }
    int key;
    cin>>key;
    tree.Find(key);
    return 0;
}

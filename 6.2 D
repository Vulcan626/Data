#include<iostream>
#include<string.h>
#include<assert.h>
using namespace std;
const int stackIncreament = 20;
template<class T>
class stack
{
private:
    T* elements;
    int top;
    int maxSize;
    void overflowProcess()
    {
        T* arr=new T[maxSize+stackIncreament];
        for(int i=0; i<=top; i++)
            arr[i]=elements[i];
        delete[]elements;
        elements=arr;
        maxSize+=stackIncreament;
    }
public:
    stack(int sz=50):top(-1),maxSize(sz)
    {
        elements=new T[maxSize];
        assert(elements!=NULL);
    }
    ~stack()
    {
        delete[]elements;
    }
    bool IsFull()const
    { return (top==maxSize-1)?true:false; }
    bool IsEmpty()const
    { return (top==-1)?true:false; }
    void Push(const T&x)
    {
        if(IsFull())
            overflowProcess();
        elements[++top]=x;
    }
    bool Pop()
    {
        if(IsEmpty())
            return false;
        else
        {
            top--;
            return true;
        }
    }
    T getTop()
    {
        if(IsEmpty()) return 0;
        return elements[top];
        
    }
    int getSize()const
    {return top+1;}
    void MakeEmpty()
    {
        top=-1;
    }
};
int main()
{
    char ch='a',str[8];
    for(int i=0;i<7;i++)
        cin>>str[i];
    stack<char>s;
    int num=0,flag=1;
    while (num<7)
    {
        if(ch== str[num])
        {
            ch++;
            num++;
        }
        else if(!s.IsEmpty()&&s.getTop()==str[num])
        {
            s.Pop();
            num++;
        }
        else if(ch<='g')
        {
            s.Push(ch);
            ch++;
        }
        else
        {
            flag=0;
            break;
        }
    }
    if(flag)
        cout<<"True";
    else
        cout<<"False";
    return 0;
}
